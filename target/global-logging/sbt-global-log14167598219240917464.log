[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Eclipse Adoptium Java 17.0.2)
[debug] Load.defaultLoad until apply took 47.066291ms
[debug]                 Load.loadUnit: plugins took 33.849375ms
[debug]                 Load.loadUnit: defsScala took 0.134375ms
[debug] [Loading] Scanning directory /Users/albertfares/ML_MUSIC/project/project
[debug]                   Load.loadUnit: mkEval took 6.778875ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /Users/albertfares/ML_MUSIC/project/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.536875 ms
[info] loading settings for project ml_music-build-build from metals.sbt ...
[debug]                     Load.resolveProject(ml_music-build-build) took 25.269292ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id ml_music-build-build, base: /Users/albertfares/ML_MUSIC/project/project, plugins: List(<none>))) took 38.668459ms
[debug] [Loading] Done in /Users/albertfares/ML_MUSIC/project/project, returning: (ml_music-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 1205.43025ms
[debug]                 Load.loadUnit: cleanEvalClasses took 3.071ms
[debug]               Load.loadUnit(file:/Users/albertfares/ML_MUSIC/project/project/, ...) took 1246.022583ms
[debug]             Load.apply: load took 1363.235375ms
[debug]             Load.apply: resolveProjects took 1.650375ms
[debug]             Load.apply: finalTransforms took 27.96125ms
[debug]             Load.apply: config.delegates took 2.967ms
[debug]             Load.apply: Def.make(settings)... took 225.695667ms
[debug]             Load.apply: structureIndex took 41.221625ms
[debug]             Load.apply: mkStreams took 0.623708ms
[info] loading project definition from /Users/albertfares/ML_MUSIC/project/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
